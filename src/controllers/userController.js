const User = require('../models/User');
const VerifyRequest = require('../models/verifyRequest');
const chalk = require('chalk');

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
 * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
 */
const createUser = async (userData) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = [
      'telegramID', 'fullName', 'inst', 'Ugroup', 'gradeBook'/*,
      'department', 'year', 'admissionYear', 'program', 'FoE', 'typeOfSet'*/
    ];
    const missing = requiredFields.filter(f => !userData[f]);
    if (missing.length > 0) {
      console.error(chalk.red('‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:'), missing.join(', '));
      return {
        success: false,
        error: `–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missing.join(', ')}`
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å telegramID
    const exists = await User.findOne({ where: { telegramID: userData.telegramID } });
    if (exists) {
      console.error(chalk.red('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegramID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:'), userData.telegramID);
      return {
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegramID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.create(userData);
    console.log(chalk.green('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:'), user.telegramID);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    await VerifyRequest.create({
      telegramID: user.telegramID,
      status: 'pending',
      whoVerify: ''
    });
    console.log(chalk.blue('üîî –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è:'), user.telegramID);

    return {
      success: true,
      data: user
    };
  } catch (error) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'), error.message);
    return {
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    };
  }
};

module.exports = {
  createUser
}; 